//float4x4 view_proj_matrix: register(c0);
//float4 light_position: register(c8);
//float4 eye_position: register(c9);
//float4x4 inv_view_matrix;
struct VS_INPUT_STRUCT
{
   float4 position:     POSITION;
   float3 normal:       NORMAL;
   float2 texcoord0:    TEXCOORD0;
   float3 tangent:      TEXCOORD1;
};

struct VS_OUTPUT_STRUCT
{
   float4 position:     POSITION;
   float2 bump_map:     TEXCOORD0;
   float3 light_vector: TEXCOORD1;
   float3 half_angle:   TEXCOORD2;
};

//**---------------------------------------------------------
//** Function:    main
//** Description: Declare the main entry point for the shader
//** Input:       VS_INPUT_STRUCT, derived from the stream
//**              mapping parameters defined in the workspace
//** Returns:     VS_OUTPUT_STRUCT
//**---------------------------------------------------------
VS_OUTPUT_STRUCT main( VS_INPUT_STRUCT vsInStruct,
		       uniform float4x4 view_proj_matrix,
		       uniform float4 light_position,
		       uniform float4 eye_position,
		       uniform float4x4 inv_view_matrix )
{
   VS_OUTPUT_STRUCT vsOutStruct; //** Declare the output struct

   //**-----------------------------------------------------------
   //** Calculate the pixel position using the perspective matrix.
   //**-----------------------------------------------------------
   vsOutStruct.position = mul( view_proj_matrix, vsInStruct.position );

   //**----------------------------------------------
   //** Pass the bump and base texture coords through
   //**----------------------------------------------
   vsOutStruct.bump_map = vsInStruct.texcoord0;

   //**----------------------------------------------
   //** Calculate the Binormal vector
   //**----------------------------------------------
   float3 binormal = cross(vsInStruct.tangent, vsInStruct.normal);

   //**--------------------------------------------
   //** Calculate the light vector in object space,
   //** and then transform it into texture space.
   //**--------------------------------------------
   float3 temp_light_position = mul( inv_view_matrix, light_position );
   float3 temp_light_vector = temp_light_position - vsInStruct.position; 
   vsOutStruct.light_vector.x = dot( temp_light_vector, vsInStruct.tangent );
   vsOutStruct.light_vector.y = dot( temp_light_vector, binormal );
   vsOutStruct.light_vector.z = dot( temp_light_vector, vsInStruct.normal );

   //**-------------------------------------------
   //** Calculate the view vector in object space,
   //** and then transform it into texture space.
   //**-------------------------------------------
   float3 temp_eye_position =  mul( inv_view_matrix, eye_position );
   float3 temp_view_vector = temp_eye_position - vsInStruct.position;
   float3 temp_view_vector2;
   temp_view_vector2.x = dot( temp_view_vector, vsInStruct.tangent );
   temp_view_vector2.y = dot( temp_view_vector, binormal );
   temp_view_vector2.z = dot( temp_view_vector, vsInStruct.normal );

   //**-------------------------
   //** Calculate the half angle
   //**-------------------------
   vsOutStruct.half_angle = vsOutStruct.light_vector + temp_view_vector2;

   return vsOutStruct; //** Return the resulting output struct
}










