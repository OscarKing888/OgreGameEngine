//float4 specular: register(c2);
//float Ka: register(c3);
//float Kd: register(c4);
//float Ks: register(c5);
//float specular_power: register(c6);
//float bumpiness: register(c7);
//float4 ambient: register(c0);
//float4 diffuse: register(c1);
//sampler base_map: register(s0);
//sampler bump_map: register(s1);
struct PS_INPUT_STRUCT
{
   float2 bump_map:     TEXCOORD0;
   float3 light_vector: TEXCOORD1;
   float3 half_angle:   TEXCOORD2;
};

struct PS_OUTPUT_STRUCT
{
   float4 color0:       COLOR0;
};

//**---------------------------------------------------------
//** Function:    main
//** Description: Declare the main entry point for the shader
//** Input:       PS_INPUT_STRUCT, derived from the output of
//**              the associated vertex shader
//** Returns:     PS_OUTPUT_STRUCT
//**---------------------------------------------------------
PS_OUTPUT_STRUCT main( PS_INPUT_STRUCT psInStruct,
		      uniform float4 specular,
		      uniform float Ka,
		      uniform float Kd,
		      uniform float Ks,
		      uniform float specular_power,
		      uniform float bumpiness,
		      uniform float4 ambient,
		      uniform float4 diffuse,
		      uniform sampler base_map,
		      uniform sampler bump_map)
{
   PS_OUTPUT_STRUCT psOutStruct; //** Declare the output struct

   //**------------------------------------------------------
   //** Retreive the base color and bump components from the
   //** respective textures, based on the passed bump coords.
   //**------------------------------------------------------
   float3 base = tex2D( base_map, psInStruct.bump_map );
   float3 bump = tex2D( bump_map, psInStruct.bump_map );

   //**----------------------------------------------------
   //** Normalize the passed vectors from the vertex shader
   //**----------------------------------------------------
   float3 normalized_light_vector = normalize( psInStruct.light_vector );
   float3 normalized_half_angle = normalize( psInStruct.half_angle );
   
   //**--------------------------------------------------------
   //** "Smooth out" the bump based on the bumpiness parameter.
   //** This is simply a linear interpolation between a "flat"
   //** normal and a "bumped" normal.  Note that this "flat"
   //** normal is based on the texture space coordinate basis.
   //**--------------------------------------------------------
   float3 smooth = { 0.5f, 0.5f, 1.0f };
   bump = lerp( smooth, bump, bumpiness );
   bump = normalize( ( bump * 2.0f ) - 1.0f );

   //**---------------------------------------------------------
   //** These dot products are used for the lighting model
   //** equations.  The surface normal dotted with the light
   //** vector is denoted by n_dot_l.  The normal vector
   //** dotted with the half angle vector is denoted by n_dot_h.
   //**---------------------------------------------------------
   float4 n_dot_l = dot( bump, normalized_light_vector );
   float4 n_dot_h = dot( bump, normalized_half_angle );

   //**--------------------------------------
   //** Calculate the resulting pixel color,
   //** based on our lighting model.
   //** Ambient + Diffuse + Specular
   //**--------------------------------------
   psOutStruct.color0.rgb =
      ( base * ambient * Ka ) +
      ( base * diffuse * Kd * max( 0.0f, n_dot_l ) ) +
      ( specular * Ks * pow( max( 0.0f, n_dot_h ), specular_power ) );
   psOutStruct.color0.a = 1.0f; //** Set the alpha component manually
 
   return psOutStruct; //** Return the resulting output struct
}






